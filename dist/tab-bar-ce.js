var tabBarTemplateString="<slot></slot><style>:host {\n        -webkit-tap-highlight-color: rgba(0,0,0,0);\n        position: absolute;\n        bottom: 0;\n        left: 0;\n        width: 100%;\n        height: 50px;\n        display: flex;\n        background: #fff;\n    }\n\n    ::slotted(scell-tab) {\n        align-self: center;\n        flex-grow: 1;\n        text-align: center;\n        cursor: pointer;\n        display: flex;\n        flex-direction: column;\n    }</style>",tabTemplateString="<slot>\x3c!-- ICON SLOT --\x3e</slot><span>\x3c!-- title --\x3e</span><style>::slotted(moko-icon) {\n        flex-grow: 1;\n        height: 18px;\n        padding-bottom: 5px;\n    }\n    span {\n        flex-grow: 1;\n    }</style>";const tabBarTemplate=document.createElement("template");tabBarTemplate.innerHTML=tabBarTemplateString;const tabTemplate=document.createElement("template");tabTemplate.innerHTML=tabTemplateString,window.ShadyCSS&&(ShadyCSS.prepareTemplate(tabBarTemplate,"scell-tab-bar"),ShadyCSS.prepareTemplate(tabTemplate,"scell-tab"));class Tab extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}).appendChild(tabTemplate.content.cloneNode(!0))}connectedCallback(){window.ShadyCSS&&ShadyCSS.styleElement(this);const t=this.shadowRoot.querySelector("span");this.getAttribute("title")&&(t.innerHTML=this.getAttribute("title")),this.querySelector("moko-icon")&&(t.style.fontSize="0.7em")}}customElements.define("moko-tab",Tab);class TabBar extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}).appendChild(tabBarTemplate.content.cloneNode(!0))}resetActiveColorForTabs(){Array.prototype.forEach.call(this.querySelectorAll("scell-tab"),t=>{t.style.color=null})}setActive(t){this.querySelectorAll("scell-tab")[t].style.color=this.getAttribute("active-color")}setActiveByTabName(t){this.selected=t}set selected(t){this.querySelector(`scell-tab[name="${t}"]`).style.color=this.getAttribute("active-color")}connectedCallback(){window.ShadyCSS&&ShadyCSS.styleElement(this),this.onclick=(t=>{const e=t.target.closest("scell-tab");if(e){const t=e.getAttribute("name");this.resetActiveColorForTabs(),e.style.color=this.getAttribute("active-color"),this.dispatchEvent(new CustomEvent("scell-tab-selected",{detail:{name:t}}))}})}}customElements.define("moko-tab-bar",TabBar);export{Tab,TabBar};
